import CommonHelpers.isFactor
import com.sun.java.swing.action.NextAction
import org.specs2.mutable.Specification

import scala.collection.immutable.Stream.from

class Problem12Spec extends Specification {

  /*
  The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
  1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

  We can see that 28 is the first triangle number to have over five divisors.

  What is the value of the first triangle number to have over five hundred divisors?
  */

  val triangles = {
    def tail(iter: Int, curr: Int):Stream[Int] = {
      curr #:: tail(iter + 1, iter + 1 + curr)
    }
    tail(1, 1)
  }

  "triangle numbers" should {
    "be 28 at 7" in {
      triangles.take(7).last should be_==(28)
    }
  }

  def factors(i: Long): Seq[Long] = {
    from(1).view.map(_.toLong).takeWhile(_ <= i).filter(isFactor(i) _)
  }

  "7th triangle" should {
    "have 5 factors" in {
      factors(triangles(6)) should beEqualTo(Seq(1, 2, 4, 7, 14, 28))
    }

    "be the first with 5 or more factors" in {
      from(1).map(triangles).dropWhile(factors(_).size < 5).head should beEqualTo(28)
    }
  }

//  "with 500 divisors" should {
//    "be really big" in {
//      from(1).view.map(triangles).dropWhile(factors(_).size < 50).head should beEqualTo(28)
//    }
//  }
}
